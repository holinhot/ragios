==TODO

===Priority
* Make notifiers plug and play, move notifier specific information out of the generic.monitor and system.monitor class
* Get Ragios server running on heroku
* Switch from thin to unicorn if conditions are appropriate
* make the ragios server bind address/port to be configurable
* update plugin testing documentation 

=Goals for versions 0.6.0
* Add a web UI admin dashboard for using Ragios Server.

===Nice to have
* Add a ragios console similar to rails console or irb.
* When a monitor is deleted, also delete all its activity from the activity log 
* Document the feature: Grouping monitors by tag

* Notification scheduler should be tagged so that it could be controlled (start/stopped)

* Follow REST completely for status updates, Add status updates delete/restart/stop by id instead by tag

* Add validation for the REST api input data

*Ragios::Server may need to should have an exception class to allow clients like the RESTserver know exactly what a problem is with specific details.

*Ragios URL plugin should allow users to set the timeout 

*Ragios URL plugin should allow users to set the type of http request they choose either a GET or POST and include body  data for a POST

*Plugins should be able to override all methods of the Ragios::Monitors::System class. Making plugins firstclass Monitors

=Goals for versions 0.5.2

==TODO
* Add a web UI admin dashboard for using Ragios Server.

==DONE
* make it part of the config to choose the name of databases that will be used to store monitors, logs, sessions and status updates
* rename server.ru to config.ru - move items to an initializer file
* move all configuration to environment variables
* add tests for 
  GET /monitors
  GET /monitors/:id
* change GET /monitors/every/1m to GET /monitors?every=1m
* add specs for Ragios::Admin

*Complete test coverage of the new system

*Create a plugin architecture, so that all monitors (like HTTP, DNS,process monitors) are added as plugins. This will also allow developers to easily write customized plugins. OR easily install plugins written by other developers.

*Create a simple http server for Ragios that responds to REST requests. This will enable other apps to communicate with Ragios via REST. Example a Rails,Sinatra or javascript app could provide a Web UI for Ragios via REST. The datafeed from Ragios could be fed to webpage, blog or mobile app.

*Add ability to persist Ragios information and real-time statistics to a database. This will allow service performance monitoring overtime. It will also enable better monitor control.

*Document the new Ragios system 0.5.1

